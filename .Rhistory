durationAvg$y <- factor(durationAvg$name, levels = unique(durationAvg$name)[order(durationAvg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
duration1 <- plot_ly(durationAvg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(duration1)
# Let's change some colors
# Add column to handle plotly colors, this might be a yikes
durationAvg$color <- "rgba(204,204,204,1)"
durationAvg[1, "color"] <- "rgba(222,45,38,0.8)"
# Make it into a list
c <- as.vector(durationAvg$color)
# Another chart, this time with the average
duration2 <- plot_ly(durationAvg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
marker = (list(color = c)))
plotly_build(duration2)
# Histogram perhaps
durHist <- plot_ly(tracks, x = ~duration_ms) %>% add_histogram(name = "duration_ms")
plotly_build(durHist)
# CHANGE TIME IN MS TO HUMAN TIME (minutes and seconds)
trackTime <- tracks %>% select(name, duration_ms) %>%
mutate(duration = format(as.POSIXct(Sys.Date())+duration_ms/1000, "%M:%S"))
# TIME SIGNATURE
time <- count(tracks, time_signature)
# Time pie (no pun this time, sorry)
timePie <- plot_ly(time, labels = ~time_signature, values = ~n, type = 'pie') %>%
layout(title = 'Modes of the Top Tracks',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(timePie)
# Observing multiple histograms that have values between 0 and 1
subplot(
danceHist, energyHist, valenceHist, acoustHist,
nrows = 4, shareX = TRUE
)
# DISTINCTNESS
trackDistinct <- summarise_all(tracks, funs(n_distinct))
trackDistinctDF <- gather(trackDistinct, "metric", "distinctness", 1:16)
distBar <- plot_ly(trackDistinctDF, x = ~metric, y = ~ distinctness, type = "bar")
plotly_build(distBar)
# Scatterplot
t <- list(family = "sans-serif",
size = 12,
color = "black")
p1 <- plot_ly(tracks, type="scatter",
mode="markers",
x = ~energy,
y = ~loudness,
# size = ~speechiness,
color = ~(-duration_ms),
colors = "BuPu",
text = ~paste(name, "<br>", artists)) %>%
layout(title = "Loudness - Energy",
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE),
font = t)
plotly_build(p1)
# ED SHEERAN
ed <- filter(tracks, grepl("Ed Sheeran", artists))
ed1 <- plot_ly(ed, x = ~name, y = ~danceability, type = "bar")
plotly_build(ed1)
edSummary <- select(ed, danceability, energy, loudness, speechiness, acousticness, liveness,
valence, tempo, duration_ms) %>%
summarise_all(funs(mean))
edBar <- gather(edSummary, "metric", "average", 1:9)
# THE CHAINSMOKERS
tsc <- filter(tracks, grepl("The Chainsmokers", artists))
tsc1 <- plot_ly(tsc, x = ~name, y = ~danceability, type = "bar")
plotly_build(tsc1)
tscSummary <- select(tsc, danceability, energy, loudness, speechiness, acousticness, liveness,
valence, tempo, duration_ms) %>%
summarise_all(funs(mean))
tscBar <- gather(tscSummary, "metric", "average", 1:9)
# ALL TRACK AVERAGES
trackAvg <- select(tracks, danceability, energy, loudness, speechiness, acousticness, liveness,
valence, tempo, duration_ms) %>%
summarise_all(funs(mean))
trackAvgBar <- gather(trackAvg, "metric", "average", 1:9)
# Compare Ed, TSC, and all track averages
topTwoCompare <- left_join(edBar, tscBar, by = "metric")
allAvgCompare <- left_join(topTwoCompare, trackAvgBar, by = "metric")
avgName <- c("metric", "Ed", "TSC", "All")
names(allAvgCompare) <- avgName
allAvgCompareX <- slice(allAvgCompare, 1:7)
allAvgCompareX <- slice(allAvgCompareX, -3)
avgCompare <- plot_ly(allAvgCompareX, x = ~metric, y = ~Ed, type = 'bar', name = "Ed Sheeran") %>%
add_trace(y = ~TSC, name = "The Chainsmokers") %>%
add_trace(y = ~All, name = "All Track Average") %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
plotly_build(avgCompare)
glimpse(tracks)
summary(tracks)
allSummary <- summary(tracks)
allSummary <- as.data.frame(summary(tracks))
View(allSummary)
allSummary <- gather(as.data.frame(summary(tracks)), "metric", "freq")
View(allSummary)
allSummary <- gather(as.data.frame(summary(tracks)), "metric", "freq", "n")
allSummary <- gather(as.data.frame(summary(tracks)), "metric", "freq", "num")
allSummary <- (as.data.frame(summary(tracks))
View(allSummary)
allSummary <- (as.data.frame(summary(tracks))
allSummary <- (as.data.frame(summary(tracks)))
allSummary <- summary(tracks)
allSummary <- as.data.frame(summary(tracks))
View(allSummary)
allSummary <- gather(as.data.frame(summary(tracks))), "Var1", "Var2", "Freq")
allSummary <- gather(as.data.frame(summary(tracks)), "Var1", "Var2", "Freq")
View(allSummary)
allSummary <- spread(as.data.frame(summary(tracks)), Var1, Var2, Freq)
allSummary <- spread(as.data.frame(summary(tracks)))
allSummary <- spread(as.data.frame(summary(tracks)), Var1)
allSummary <- as.data.frame(summary(tracks))
View(allSummary)
allSummary <- as.data.frame(summary(tracks)) %>% select(Var2, Freq)
View(allSummary)
View(distBar)
View(distBar)
View(durHist)
View(duration1)
View(danceHist)
View(durationAsc)
View(energy)
View(edBar)
View(edSummary)
View(durHist)
plotly_build(danceHist)
library(ggplot2)
library(reshape2)
# CORRELATION HEAT MAP
qplot(x=Var1, y=Var2, data=melt(cor(tracks)), fill=value, geom="tile")
# CORRELATION HEAT MAP
trackNum <- select(tracks, -id, -name, -artists)
qplot(x=Var1, y=Var2, data=melt(cor(trackNum)), fill=value, geom="tile")
qplot(x=Var1, y=Var2, data=melt(cor(trackNum)), fill=value, geom="tile")
heatMap1 <- plot_ly(z = trackNum, type = "heatmap")
plotly_build(heatMap1)
# qplot(x=Var1, y=Var2, data=melt(cor(trackNum)), fill=value, geom="tile")
heatMap1 <- plot_ly(z = trackNum, type = "heatmap")
plotly_build(heatMap1)
# qplot(x=Var1, y=Var2, data=melt(cor(trackNum)), fill=value, geom="tile")
trackMatrix <- data.matrix(trackNum, rownames.force = NA)
heatMap1 <- plot_ly(z = trackMatrix, type = "heatmap")
plotly_build(heatMap1)
View(trackMatrix)
# qplot(x=Var1, y=Var2, data=melt(cor(trackNum)), fill=value, geom="tile")
trackMatrix <- as.matrix(trackNum)
heatMap1 <- plot_ly(z = trackMatrix, type = "heatmap")
plotly_build(heatMap1)
qplot(x=Var1, y=Var2, data=melt(cor(trackNum)), fill=value, geom="tile")
# CORRELATION HEAT MAP
trackNum <- select(tracks, -id, -name, -artists)
qplot(x=Var1, y=Var2, data=melt(cor(trackNum)), fill=value, geom="tile")
plotly_build(p1)
# Observing multiple histograms that have values between 0 and 1
subplot(
danceHist, energyHist, valenceHist, acoustHist,
nrows = 4, shareX = TRUE
)
plotly_build(danceHist)
# Danceability histogram
danceHist <- plot_ly(dance, x = ~danceability) %>% add_histogram(name = "Danceability")
plotly_build(danceHist)
# Danceability histogram
danceHist <- plot_ly(dance, x = ~danceability) %>% add_histogram(name = "danceability")
plotly_build(danceHist)
# Energy histogram
energyHist <- plot_ly(energy, x = ~energy) %>% add_histogram(name = "energy")
plotly_build(modePie)
keyCount <- key %>% count(key)
plotly_build(keyChart)
keyNames <- c("C", "C♯", "D", "	D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B")
keyCount <- key %>% count(key) %>% setNames(keyNames)
View(keyCount)
keyCount$key <- keyNames
View(keyCount)
# Key bar chart
keyChart <- plot_ly(keyCount, x = ~key, y = ~n, type = "bar")
plotly_build(keyChart)
keyCount <- key %>% count(key)
View(keyCount)
# Key bar chart
keyChart <- plot_ly(keyCount, x = ~key, y = ~n, type = "bar")
# Key bar chart
keyChart <- plot_ly(keyCount, x = ~key, y = ~n, type = "bar")
keyCount <- key %>% count(key)
# Key bar chart
keyChart <- plot_ly(keyCount, x = ~key, y = ~n, type = "bar")
key <- select(tracks, name, artists, key)
keyNames <- c("C", "C♯", "D", "	D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B")
keyCount <- key %>% count(key)
keyCount$key <- keyNames
# Key bar chart
keyChart <- plot_ly(keyCount, x = ~key, y = ~n, type = "bar")
plotly_build(keyChart)
keyNames <- c("C", "C♯", "D", "	D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B")
keyCount <- key %>% count(key)
keyCount$key <- keyNames
# Key bar chart
keyChart <- plot_ly(keyCount, x = ~key, y = ~n, type = "bar")
plotly_build(keyChart)
load("/Users/marachilds/Downloads/spotify_track_data.rda")
View(spotify_track_data)
View(tracks)
View(spotify_track_data)
library(dplyr)
allYears <- load(file = "data/spotify_track_data.rda")
load(file = "data/spotify_track_data.rda")
load(file = "data/spotify_track_data.rda")
View(spotify_track_data)
allYears <- spotify_track_data
# Libraries
library(dplyr)
load(file = "data/spotify_track_data.rda")
allYears <- spotify_track_data
View(allYears)
year1960 <- filter(allYears, year = 1960)
year1960 <- filter(allYears, year == 1960)
View(year1960)
year2016 <- filter(allYears, year == 2016)
View(allYears)
year2016 <- filter(allYears, year == 2015)
load("/Users/marachilds/Downloads/wiki_hot_100s.rda")
View(wiki_hot_100s)
year2015 <- filter(allYears, year == 2015)
View(wiki_hot_100s)
# Libraries
library(dplyr)
# Load in rda from github
load(file = "data/spotify_track_data.rda")
# Rename to allYears
allYears <- spotify_track_data
year1960 <- filter(allYears, year == 1960)
year2015 <- filter(allYears, year == 2015)
View(year1960)
summary1960 <- year1960 %>%
select(danceability, energy, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo) %>%
summarise_each(funs(mean))
summary1960 <- year1960 %>%
select(danceability, energy, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo) %>%
summarise_all(funs(mean))
View(summary1960)
summary1960 <- year1960 %>%
select(year, danceability, energy, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo) %>%
summarise_all(funs(mean))
View(summary1960)
summary1960 <- year1960 %>%
select(danceability, energy, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo) %>%
summarise_all(funs(mean))
summary2015 <- year2015 %>%
select(danceability, energy, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo) %>%
summarise_all(funs(mean))
View(summary2015)
# Aggregate examination
allYears %>% gropu_by(year) %>% summarise(funs(mean))
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise(funs(mean))
View(allAvg)
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise(danceability)
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise(mean)
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise(n_distinct)
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise(mean)
# Aggregate examination
allAvg <- allYears %>% group_by(year)
View(allAvg)
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise(min)
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise_all(min)
View(allAvg)
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise_all(mean)
View(allAvg)
# Explicitness
explicitBar <- ggplot(allAvg, aes(x = year, y = explicit))
ggplot(explicitBar)
# Explicitness
ggplot(allAvg, aes(x = year, y = explicit))
# Explicitness
explicitBar <- plot_ly(allAvg, x = ~year, y = ~explicit, type = "bar")
plotly_build(explicitBar)
danceBar <- plot_ly(allAvg, x = ~year, y = ~danceability, type = "bar")
plotly_build(danceBar)
energyBar <- plot_ly(allAvg, x = ~year, y = ~energy, type = "bar")
plotly_build(energyBar)
loudBar <- plot_ly(allAvg, x = ~year, y = ~loudness, type = "bar")
plotly_build(loudBar)
speechBar <- plot_ly(allAvg, x = ~year, y = ~speechiness, type = "bar")
plotly_build(speechBar)
acoustBar <- plot_ly(allAvg, x = ~year, y = ~acousticness, type = "bar")
plotly_build(acoustBar)
# Instrumentalness
instBar <- plot_ly(allAvg, x = ~year, y = ~instrumentalness, type = "bar")
plotly_build(instBar)
liveBar <- plot_ly(allAvg, x = ~year, y = ~liveness, type = "bar")
plotly_build(liveBar)
valBar <- plot_ly(allAvg, x = ~year, y = ~valence, type = "bar")
plotly_build(valBar)
tempoBar <- plot_ly(allAvg, x = ~year, y = ~tempo, type = "bar")
plotly_build(tempoBar)
durationBar <- plot_ly(allAvg, x = ~year, y = ~duration_ms, type = "bar")
plotly_build(durationhBar)
durationBar <- plot_ly(allAvg, x = ~year, y = ~duration_ms, type = "bar")
plotly_build(durationBar)
plotly_build(explicitBar)
plotly_build(danceHist)
plotly_build(danceBar)
plotly_build(instBar)
plotly_build(liveBar)
plotly_build(valBar)
plotly_build(tempoBar)
plotly_build(durationBar)
plotly_build(explicitBar)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# SWD to source file location
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# SWD to source file location
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
View(tracks)
tracks <- rownames_to_column(tracks, "rank")
p1 <- plot_ly(x = ~rank, y = ~danceability, type = "scatter", mode = "markers")
plotly_build(p1)
p1 <- plot_ly(x = ~rank, y = ~danceability, type = "scatter", mode = "markers")
plotly_build(p1)
p1 <- plot_ly(tracks, x = ~rank, y = ~danceability, type = "scatter", mode = "markers")
plotly_build(p1)
p1 <- plot_ly(tracks, x = ~rank, y = ~energy, type = "scatter", mode = "markers")
p1 <- plot_ly(tracks, x = ~rank, y = ~rank, type = "scatter", mode = "markers")
plotly_build(p1)
p1 <- plot_ly(tracks, x = ~rank, y = ~energy, type = "scatter", mode = "markers")
plotly_build(p1)
p1 <- plot_ly(tracks, x = ~rank, y = ~loudness, type = "scatter", mode = "markers")
plotly_build(p1)
p1 <- plot_ly(tracks, x = ~rank, y = ~tempo, type = "scatter", mode = "markers")
plotly_build(p1)
p1 <- plot_ly(tracks, x = ~rank, y = ~valence, type = "scatter", mode = "markers")
plotly_build(p1)
p1 <- plot_ly(tracks, x = ~rank, y = ~danceability, type = "scatter", mode = "markers")
plotly_build(p1)
p2 <- tracks %>%
plot_ly(labels = ~manuf, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(p2)
p2 <- tracks %>%
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(p2)
p2 <- tracks[, 1] %>%
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p2 <- tracks[1] %>%
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p2 <- tracks[1] %>%
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(p2)
p2 <- tracks[, 1] %>%
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p2 <- tracks %>%
filter(rank == 1)
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
View(p2)
plot_ly(labels = name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(p2)
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(p2)
plot_ly(values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(p2)
p2 <- tracks %>%
filter(rank == 1) %>%
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(p2)
danceability <- tracks %>%
filter(rank == 1) %>%
select(name, artists, danceability) %>%
mutate(danceabilityPercent = danceability * 100)
View(danceability)
danceability <- tracks %>%
filter(rank == 1) %>%
select(name, artists, danceability) %>%
mutate(danceabilityPercent = 1 - danceability)
View(danceability)
p2 <- tracks %>%
filter(rank == 1) %>%
plot_ly(labels = ~name, values = ~danceability) %>%
add_pie(hole = 0.6) %>%
layout(title = "Danceability",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plotly_build(p2)
danceabilityPercentage <- danceability[nrow(danceability) + 1,] = list("v1","v2","v3","v4")
# Libraries
library(dplyr)
# Load in rda from github
load(file = "data/spotify_track_data.rda")
# Rename to allYears
allYears <- spotify_track_data
# Let's look at the extremes first
year1960 <- filter(allYears, year == 1960)
year2015 <- filter(allYears, year == 2015)
# There is a huge difference, as to be expected
summary1960 <- year1960 %>%
select(danceability, energy, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo) %>%
summarise_all(funs(mean))
summary2015 <- year2015 %>%
select(danceability, energy, loudness, speechiness, acousticness,
instrumentalness, liveness, valence, tempo) %>%
summarise_all(funs(mean))
# Aggregate examination
allAvg <- allYears %>% group_by(year) %>% summarise_all(mean)
# Explicitness
explicitBar <- plot_ly(allAvg, x = ~year, y = ~explicit, type = "bar")
plotly_build(explicitBar)
# Danceability
danceBar <- plot_ly(allAvg, x = ~year, y = ~danceability, type = "bar")
plotly_build(danceBar)
# Energy
energyBar <- plot_ly(allAvg, x = ~year, y = ~energy, type = "bar")
plotly_build(energyBar)
# Loudness
loudBar <- plot_ly(allAvg, x = ~year, y = ~loudness, type = "bar")
plotly_build(loudBar)
# Speechiness
speechBar <- plot_ly(allAvg, x = ~year, y = ~speechiness, type = "bar")
plotly_build(speechBar)
# Acousticness
acoustBar <- plot_ly(allAvg, x = ~year, y = ~acousticness, type = "bar")
plotly_build(acoustBar)
# Instrumentalness
instBar <- plot_ly(allAvg, x = ~year, y = ~instrumentalness, type = "bar")
plotly_build(instBar)
# Liveness
liveBar <- plot_ly(allAvg, x = ~year, y = ~liveness, type = "bar")
plotly_build(liveBar)
# Valence
valBar <- plot_ly(allAvg, x = ~year, y = ~valence, type = "bar")
plotly_build(valBar)
# Tempo
tempoBar <- plot_ly(allAvg, x = ~year, y = ~tempo, type = "bar")
plotly_build(tempoBar)
# Duration
durationBar <- plot_ly(allAvg, x = ~year, y = ~duration_ms, type = "bar")
plotly_build(durationBar)
plotly_build(explicitBar)
View(tracks)
min(tracks$speechiness)
max(tracks$speechiness)
