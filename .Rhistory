p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
View(duration_avg)
# Let's change some colors
# Add column to handle plotly colors
duration_avg %>% mutate(duration_avg, color = "blue")
View(duration_avg)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
View(duration_avg)
duration_avg["blue", 0] <- "red"
duration_avg["blue", 1] <- "red"
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p2)
View(duration_avg)
duration_avg[0, "color"] <- "red"
duration_avg[1, "color"] <- "red"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
color = ~color)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
duration_avg[1, "color"] <- "red"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
color = ~color)
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
duration_avg[1, "color"] <- "red"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
color = toRGB(~color))
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "0"
duration_avg[1, "color"] <- "1"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
color = ~color)
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "3"
duration_avg[1, "color"] <- "5"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
color = ~color)
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
duration_avg[1, "color"] <- "red"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
color = ~color)
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
duration_avg[1, "color"] <- "red"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
color = color)
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
duration_avg[1, "color"] <- "red"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
color = ~color)
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "blue"
duration_avg[1, "color"] <- "red"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
marker = list(c(~color))
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "rgba(204,204,204,1)"
duration_avg[1, "color"] <- "rgba(222,45,38,0.8)"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
marker = list(c(~color)))
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "rgba(204,204,204,1)"
duration_avg[1, "color"] <- "rgba(222,45,38,0.8)"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
marker = list(c(as.vector(~color))))
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "rgba(204,204,204,1)"
duration_avg[1, "color"] <- "rgba(222,45,38,0.8)"
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
marker = list(c(as.vector(duration_avg$color))))
plotly_build(p2)
# Load dependencies
library(plotly)
library(dplyr)
library(tibble)
# Set working directory
setwd("~/Google Drive/School/GSA 2017-2018/7-Data Visualization/dataviz")
# Read in Spotify Top Songs 2017 csv
tracks <- read.csv("data/toptracks2017.csv", stringsAsFactors = FALSE)
# Tracks by ascending duration
duration_asc <- arrange(tracks, duration_ms) %>% select(name, duration_ms)
# Add average duration in ms
duration_avg <- duration_asc %>%
summarise(name = "Average Length",
duration_ms = mean(duration_ms)) %>%
bind_rows(duration_asc)
# Set factor level order for top-bottom ascending duration
duration_avg$y <- factor(duration_avg$name, levels = unique(duration_avg$name)[order(duration_avg$duration_ms, decreasing = TRUE)])
# Alternatively, set row number to column called number to replace "~y"
# duration_asc <- rownames_to_column(duration_asc, "number")
p1 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y)
plotly_build(p1)
# Let's change some colors
# Add column to handle plotly colors
duration_avg$color <- "rgba(204,204,204,1)"
duration_avg[1, "color"] <- "rgba(222,45,38,0.8)"
c <- as.vector(duration_avg$color)
# Another chart
p2 <- plot_ly(duration_avg, type="bar",
orientation="h",
x = ~duration_ms,
y = ~y,
marker = (list(color = c)))
plotly_build(p2)
